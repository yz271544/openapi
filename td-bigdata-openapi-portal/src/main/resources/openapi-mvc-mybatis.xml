<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	   xmlns:jee="http://www.springframework.org/schema/jee" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/task  
		http://www.springframework.org/schema/task/spring-task-3.1.xsd " default-lazy-init="true">
 
 <!-- 开启注解配置 -->
 <context:annotation-config />
 <!-- 引入属性文件 -->
 <context:property-placeholder ignore-resource-not-found="false" location="classpath*:data/jdbc.properties" />

 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
    <property name="driverClassName" value="${jdbc.driver}" />
	<!-- 基本属性 url、user、password -->
	<property name="url" value="${jdbc.url}" />
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
	<!-- 配置初始化大小、最小、最大 -->
	<property name="initialSize" value="${pool.minIdle}" />
	<property name="minIdle" value="${pool.minIdle}" /> 
	<property name="maxActive" value="${pool.maxActive}" />
	<!-- 配置获取连接等待超时的时间 -->
	<property name="maxWait" value="60000" />
	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	<property name="timeBetweenEvictionRunsMillis" value="60000" />
	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	<property name="minEvictableIdleTimeMillis" value="300000" />
	<property name="validationQuery" value="SELECT 'x'" />
	<property name="testWhileIdle" value="true" />
	<property name="testOnBorrow" value="false" />
	<property name="testOnReturn" value="false" />
	<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
	<property name="poolPreparedStatements" value="true" />
	<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
	<property name="removeAbandoned" value="${pool.removeAbandoned}" />
	<property name="removeAbandonedTimeout" value="${pool.removeAbandonedTimeout}" />
	<!-- 配置监控统计拦截的filters -->
    <property name="filters" value="stat" /> 
  </bean>
  
  <!--  事务管理配置 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"></property>
  </bean>
  
  <tx:annotation-driven transaction-manager="transactionManager"/> 
  
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes >
    	<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="modify*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="do*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		<tx:method name="find*" read-only="true" />
		<tx:method name="get*" read-only="true" />
		<tx:method name="select*" read-only="true" />
		<tx:method name="count*" read-only="true" />
    </tx:attributes>
  </tx:advice>
  <aop:config >
    <aop:pointcut expression="execution(* com.teradata.portal.*.service.*.*(..)) || execution(* com.teradata.portal.web.*.service.*.*(..))" id="service"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="service"/>
  </aop:config>

	<bean id="pagePlugin" class="com.teradata.portal.admin.auth.plugin.mybatis.plugin.PagePlugin">
		<property name="properties">
			<props>
				<!-- 指示的数据库类型 -->
				<prop key="dialect">com.teradata.portal.admin.auth.plugin.jdbc.dialect.PostgreSQLDialect</prop>
				<!-- 拦截的规则 -->
				<prop key="pageSqlId">.*Page</prop>
			</props>
		</property>
	</bean>
  
  <!-- 与mybatis集成  -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"></property>
    <property name="configLocation" value="classpath:data/mybatis-config.xml"></property>
	  <property name="plugins">
		  <array>
			  <ref bean="pagePlugin" />
		  </array>
	  </property>
    <!-- mybatis配置文件自动扫描路径  -->
    <property name="mapperLocations" value="classpath:data/mapper/*.xml"></property>
  </bean>
  
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="basePackage" value="com.teradata.portal.**.dao" />
	  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
  </bean>

</beans>